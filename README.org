* What ?

Uses images from a directory as a background image on wlroot-based wayland compositors.

Based on the [[https://docs.rs/image/latest/image/][image]] and [[https://docs.rs/wayland-protocols/latest/wayland_protocols/][wayland_protocols]] crates.

Plugging, uplugging or changing the mode of your connected displays should not affect the proper
working of the program : new screens will be detected, old screens will no longer be taken into
account, and resolution changes will trigger a redraw.

Due to the nature of the wayland protocol, the program must be kept alive because when it
terminates, the compositor will free all the resources it associated with it, which means (among
other things) closing the pseudo-windows that are used to display the background image.

* How ?

Config is the result of a marge of a default config, and the contents of to files :
~/etc/wl-bg-gallery/config.toml~, and ~${HOME}/.config/wl-bg-gallery/config.toml~.

If none of these files exist, the default config is used. However if parsing fails for any of these,
the program will exit. If a key is specified multiple times, the latest occurrence is kept.

The default config is the following :

#+begin_example toml
path = "~/Pictures/wallpaper"
bg_duration_seconds = 60
#+end_example

- ~path~ is folder in which the program will look for pictures.
- ~bg_duration_seconds~ in the time (in seconds) between each background change.

The program parses the contents of path ~path~ at startup, and each time that it has displayed every
picture in its list. Images whose size (in pixels) is larger than that of the screen are downscaled
to fit while maintaining aspect ratio, and images smaller than the size of the screen are centered.

* Next ?

- Ideally, some sort of algorithm to assign pictures to screens in a "best fit" fashion : as of now,
  image assignment is "first come first serve", which means that low-resolution screen can end up
  displaying pictures larger than their resolution and vice-versa.
- Different policieswhen the image does not perfectly fit :
  - Stretch
  - Mosaic
  - Center with color gradient / gaussian blur
  - ...
- Improve error handling (some cases in which I used ~panic!~ might be recoverable).
- Write some proper documentation.
- This program is my first real attempt at writing rust, I am open to criticism (my code might not
  be very _idiomatic_).
